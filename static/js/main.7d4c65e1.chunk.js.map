{"version":3,"sources":["components/Control/Control.module.css","components/Toolbar/Toolbar.module.css","components/Modal/Modal.module.css","components/Backdrop/Backdrop.module.css","components/WeatherBox/WeatherBox.module.css","components/Toolbar/Toolbar.js","components/Control/Control.js","components/Backdrop/Backdrop.js","components/Modal/Modal.js","components/WeatherBox/WeatherBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Control","Logo","Toolbar","source","github","text","logo","Modal","Backdrop","WeatherBox","cityName","tempature","icon","description","toolbar","props","react_default","a","createElement","Fragment","className","styles","src","alt","href","style","fontSize","control","onClick","clicked","Text","backDrop","show","modal","opacity","transform","placeholder","onChange","onInput","value","required","width","padding","margin","border","boxSizing","children","state","_this2","this","axios","get","city","then","response","fetchedData","data","descr","weather","main","tempCelcius","temp","toFixed","name","setState","iconPath","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","input","target","onAdd","tempCities","toConsumableArray","cities","push","toggleAddingMode","onRemove","console","log","citiesRemoved","filter","c","isAddingCity","bind","assertThisInitialized","prevState","buttonStyle","backgroundColor","height","cursor","map","components_WeatherBox_WeatherBox","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d4c65e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Control\":\"Control_Control__1qMzB\",\"Logo\":\"Control_Logo__2tOqM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__2QS0u\",\"source\":\"Toolbar_source__LtYhx\",\"github\":\"Toolbar_github__l0eVa\",\"text\":\"Toolbar_text__1k5cZ\",\"logo\":\"Toolbar_logo__2usiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2WBTT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2O1l9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherBox\":\"WeatherBox_WeatherBox__1fSuq\",\"cityName\":\"WeatherBox_cityName__KZsWu\",\"tempature\":\"WeatherBox_tempature__2jp8j\",\"icon\":\"WeatherBox_icon__2-7Jj\",\"description\":\"WeatherBox_description__2i0D0\"};","import React from 'react';\nimport styles from './Toolbar.module.css'\n\nconst toolbar = (props) => {\n\n    return(\n    <React.Fragment>\n\n        <header className={styles.Toolbar}>\n            <div><img className={styles.logo} src = {\"assets/logo.png\"} alt=\"logo not found\"></img></div>\n            <div className={styles.text}>Weather App </div>\n            <a href =\"https://github.com/MutluhanB/weather-app\">\n            <div className={styles.source}>\n                <img className = {styles.github} src={\"assets/github.png\"} alt=\"github icon not found\"></img>\n                <div style={{\n                    fontSize:\"18px\"}}\n                    >Source Code</div>\n            </div>\n            </a>\n            \n            \n        </header>\n\n        </React.Fragment>)\n}\n    \n\n\n\nexport default toolbar;","import React from 'react';\nimport styles from './Control.module.css';\n\n\nconst control = (props) => {\n    return(\n        <div className = {styles.Control} onClick={props.clicked}>\n\n            \n                <img className = {styles.Logo} src={\"assets/plus.png\"} alt=\"not found\"/>\n            <div className={styles.Text}>\n                Click Here To Add New City\n            </div>\n            \n        </div>\n    )\n}\n\nexport default control;","import React from 'react';\nimport styles from './Backdrop.module.css'\n\nconst backDrop = (props) => (\n    props.show ? <div className={styles.Backdrop}/> : null\n\n)\n\n\nexport default backDrop;","import React from 'react';\nimport styles from './Modal.module.css';\nimport Backdrop from '../Backdrop/Backdrop';\n\nconst modal = (props) => {\n    var style = {     \n    width: \"100%\",\n    padding: \"12px 20px\",\n    margin: \"8px 0\",\n    border :\" 1px solid rgb(120, 203, 236)\",\n    boxSizing: \"border-box\"\n    }\n    return(\n        \n        <React.Fragment>\n            <Backdrop show = {props.show}/>\n            <div className={styles.Modal} style={\n                {\n                    opacity: props.show ? '1' : '0',\n                    transform: props.show ? 'translateY(0)' : 'translateY(-50ch)'\n                }\n            }>\n                <input placeholder=\"City Name (istanbul london etc.)\" onChange ={props.onInput} value={props.value} required={true} style={style}/>\n                \n                {props.children}\n            </div>\n        </React.Fragment>\n\n    )\n\n}\n\n\n\n\n\nexport default modal;","import React, {Component} from 'react';\nimport styles from './WeatherBox.module.css';\nimport axios from 'axios';\n\n\nclass WeatherBox extends Component{\n    state = {\n        description: null,\n        tempature: null,\n        cityName: null,\n    }\n    componentDidMount(){\n        const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?q='\n        const APP_ID = '&APPID=bfcfa473b679b91c8b68fadde8a394a9'\n        axios.get(BASE_URL+this.props.city+APP_ID).then(response => {\n            const fetchedData = response.data;\n            const descr = fetchedData.weather[\"0\"].main\n            const tempKelvin = fetchedData.main.temp;\n            const tempCelcius = (tempKelvin - 273.15).toFixed(1);\n            const name = fetchedData.name;\n            this.setState({description: descr, tempature:tempCelcius, cityName:name});\n\n        })\n    }\n\n   \n    render(){\n        if (this.state.description === null){\n            this.setState({description:\"Loading\"})\n        }\n        const iconPath = \"assets/weather/\"+this.state.description+\".png\";\n            return(\n  \n                <div className = {styles.WeatherBox} onClick={this.props.onClick}>\n                     <div className = {styles.cityName}>{this.state.cityName}</div>\n                    <div className = {styles.description}>{this.state.description}\n                        <div className = {styles.icon}>\n                            <img src={iconPath} alt=\"unknown weather status icon not found\"></img>\n                        </div>\n                    </div>\n                        \n                    \n                    <div className={styles.tempature}>{this.state.tempature} °C</div>\n                </div>\n                \n                \n            \n        )\n    }\n\n}\n\nexport default WeatherBox;","import React, {Component} from 'react';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport Control from './components/Control/Control';\nimport Modal from './components/Modal/Modal';\nimport WeatherBox from './components/WeatherBox/WeatherBox';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isAddingCity: false,\n      input: '',\n      cities: [\"Ankara\"],\n    }\n    this.toggleAddingMode = this.toggleAddingMode.bind(this);\n  }\n  \n\n\n  toggleAddingMode() {\n    this.setState(prevState =>(\n      {isAddingCity: !prevState.isAddingCity,\n      input:''}\n    ))\n\n  }\n\n  onInput = (e) => {\n    this.setState({input: e.target.value})\n    \n    \n  }\n\n  onAdd = (e) => {\n    if(this.state.input !== ''){\n\n      let tempCities = [...this.state.cities];\n      tempCities.push(this.state.input);\n      this.setState({cities:tempCities, input:''})\n      this.toggleAddingMode()\n    }\n    \n    \n  }\n\n  onRemove = (city) => {\n    console.log(city);\n    let cities = this.state.cities;\n    let citiesRemoved = cities.filter(c=> c!== city)\n    this.setState({cities:citiesRemoved});\n    \n  }\n  render() {\n   \n      var buttonStyle = {\n        margin:\"auto\",\n        backgroundColor: \"white\",\n        border: \"1px solid rgb(120, 203, 236)\",\n        padding: \"16px\",\n        width: \"40%\",\n        height: \"10%\",\n        cursor: \"pointer\"\n        \n\n\n      }\n      return (\n        <React.Fragment>\n          <Toolbar/>\n          <Modal show={this.state.isAddingCity} onInput = {this.onInput} value={this.state.input}>\n                <button style={buttonStyle}  onClick={this.onAdd}>Add City</button>\n                <button style={buttonStyle} onClick={this.toggleAddingMode}>Cancel</button>\n\n          </Modal>\n          {\n            this.state.cities.map(city => (<WeatherBox key={city} city={city} onClick = {()=> this.onRemove(city)}/>))\n          }\n          \n          <Control clicked={this.toggleAddingMode}/>\n          \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}